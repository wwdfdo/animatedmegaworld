{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport { useLocomotiveScroll } from \"react-locomotive-scroll\";\nimport { useEffect } from \"react\";\n\nconst ScrollTriggerProxy = () => {\n  _s();\n\n  const {\n    scroll\n  } = useLocomotiveScroll();\n  gsap.registerPlugin(ScrollTrigger);\n  useEffect(() => {\n    if (scroll) {\n      const element = scroll === null || scroll === void 0 ? void 0 : scroll.el;\n      scroll.on(\"scroll\", ScrollTrigger.update);\n      ScrollTrigger.scrollerProxy(element, {\n        scrollTop(value) {\n          return arguments.length ? scroll.scrollTo(value, 0, 0) : scroll.scroll.instance.scroll.y;\n        },\n\n        // we don't have to define a scrollLeft because we're only scrolling vertically.\n        getBoundingClientRect() {\n          return {\n            top: 0,\n            left: 0,\n            width: window.innerWidth,\n            height: window.innerHeight\n          };\n        },\n\n        // LocomotiveScroll handles things completely differently on mobile devices - it doesn't even transform the container at all! So to get the correct behavior and avoid jitters, we should pin things with position: fixed on mobile. We sense it by checking to see if there's a transform applied to the container (the LocomotiveScroll-controlled element).\n        pinType: element.style.transform ? \"transform\" : \"fixed\"\n      });\n    }\n\n    return () => {\n      ScrollTrigger.addEventListener(\"refresh\", () => scroll === null || scroll === void 0 ? void 0 : scroll.update());\n      ScrollTrigger.refresh();\n    };\n  }, [scroll]);\n  return null;\n};\n\n_s(ScrollTriggerProxy, \"IwiEG3ynQwo6uTnjwSbeeNjIY+M=\", false, function () {\n  return [useLocomotiveScroll];\n});\n\n_c = ScrollTriggerProxy;\nexport default ScrollTriggerProxy;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScrollTriggerProxy\");","map":{"version":3,"sources":["D:/clone-wibe-studio/src/components/ScrollTriggerProxy.js"],"names":["React","gsap","ScrollTrigger","useLocomotiveScroll","useEffect","ScrollTriggerProxy","scroll","registerPlugin","element","el","on","update","scrollerProxy","scrollTop","value","arguments","length","scrollTo","instance","y","getBoundingClientRect","top","left","width","window","innerWidth","height","innerHeight","pinType","style","transform","addEventListener","refresh"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAaH,mBAAmB,EAAtC;AACAF,EAAAA,IAAI,CAACM,cAAL,CAAoBL,aAApB;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,MAAJ,EAAY;AACV,YAAME,OAAO,GAAGF,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEG,EAAxB;AACAH,MAAAA,MAAM,CAACI,EAAP,CAAU,QAAV,EAAoBR,aAAa,CAACS,MAAlC;AAEAT,MAAAA,aAAa,CAACU,aAAd,CAA4BJ,OAA5B,EAAqC;AACnCK,QAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,iBAAOC,SAAS,CAACC,MAAV,GACHV,MAAM,CAACW,QAAP,CAAgBH,KAAhB,EAAuB,CAAvB,EAA0B,CAA1B,CADG,GAEHR,MAAM,CAACA,MAAP,CAAcY,QAAd,CAAuBZ,MAAvB,CAA8Ba,CAFlC;AAGD,SALkC;;AAKhC;AACHC,QAAAA,qBAAqB,GAAG;AACtB,iBAAO;AACLC,YAAAA,GAAG,EAAE,CADA;AAELC,YAAAA,IAAI,EAAE,CAFD;AAGLC,YAAAA,KAAK,EAAEC,MAAM,CAACC,UAHT;AAILC,YAAAA,MAAM,EAAEF,MAAM,CAACG;AAJV,WAAP;AAMD,SAbkC;;AAcnC;AACAC,QAAAA,OAAO,EAAEpB,OAAO,CAACqB,KAAR,CAAcC,SAAd,GAA0B,WAA1B,GAAwC;AAfd,OAArC;AAiBD;;AAED,WAAO,MAAM;AACX5B,MAAAA,aAAa,CAAC6B,gBAAd,CAA+B,SAA/B,EAA0C,MAAMzB,MAAN,aAAMA,MAAN,uBAAMA,MAAM,CAAEK,MAAR,EAAhD;AACAT,MAAAA,aAAa,CAAC8B,OAAd;AACD,KAHD;AAID,GA5BQ,EA4BN,CAAC1B,MAAD,CA5BM,CAAT;AA8BA,SAAO,IAAP;AACD,CAnCD;;GAAMD,kB;UACeF,mB;;;KADfE,kB;AAqCN,eAAeA,kBAAf","sourcesContent":["import React from \"react\";\r\nimport gsap from \"gsap\";\r\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\r\nimport { useLocomotiveScroll } from \"react-locomotive-scroll\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ScrollTriggerProxy = () => {\r\n  const { scroll } = useLocomotiveScroll();\r\n  gsap.registerPlugin(ScrollTrigger);\r\n\r\n  useEffect(() => {\r\n    if (scroll) {\r\n      const element = scroll?.el;\r\n      scroll.on(\"scroll\", ScrollTrigger.update);\r\n\r\n      ScrollTrigger.scrollerProxy(element, {\r\n        scrollTop(value) {\r\n          return arguments.length\r\n            ? scroll.scrollTo(value, 0, 0)\r\n            : scroll.scroll.instance.scroll.y;\r\n        }, // we don't have to define a scrollLeft because we're only scrolling vertically.\r\n        getBoundingClientRect() {\r\n          return {\r\n            top: 0,\r\n            left: 0,\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n          };\r\n        },\r\n        // LocomotiveScroll handles things completely differently on mobile devices - it doesn't even transform the container at all! So to get the correct behavior and avoid jitters, we should pin things with position: fixed on mobile. We sense it by checking to see if there's a transform applied to the container (the LocomotiveScroll-controlled element).\r\n        pinType: element.style.transform ? \"transform\" : \"fixed\",\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      ScrollTrigger.addEventListener(\"refresh\", () => scroll?.update());\r\n      ScrollTrigger.refresh();\r\n    };\r\n  }, [scroll]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ScrollTriggerProxy;\r\n"]},"metadata":{},"sourceType":"module"}